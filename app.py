# app.py
import streamlit as st
import pandas as pd
import psycopg
from psycopg.rows import dict_row

st.set_page_config(page_title="Supabase ‚Üî Streamlit", layout="wide")

st.title("üîó Supabase ‚Üî Streamlit (–±–µ–∑ –ø–∞—Ä–æ–ª–∞ –≤ –∫–æ–¥–∞)")

# ---------------------------
# –ß–µ—Ç–µ–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –≤—Ä—ä–∑–∫–∞
# ---------------------------
# –û—á–∞–∫–≤–∞–º–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞ –≤ secrets.toml –∏–ª–∏ Streamlit Cloud Secrets:
# [connections.supabase]
# host = "grtbkhkxaemkxjuotvjy.supabase.co"
# dbname = "kgcollected"        # –∏–ª–∏ "postgres"
# user = "postgres"
# password = "–¢–í–û–Ø–¢–ê_–ü–ê–†–û–õ–ê"
# port = "5432"

db = st.secrets["connections"]["supabase"]

# ---------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞ (cached)
# ---------------------------
@st.cache_resource
def get_conn():
    try:
        conn = psycopg.connect(
            host=db["host"],
            dbname=db["dbname"],
            user=db["user"],
            password=db["password"],
            port=int(db.get("port", 5432)),
            row_factory=dict_row,  # –≤—Ä—ä—â–∞ —Ä–µ–¥–æ–≤–µ—Ç–µ –∫–∞—Ç–æ —Ä–µ—á–Ω–∏—Ü–∏
            autocommit=False
        )
        return conn
    except Exception as e:
        st.error(f"–ù–µ—É—Å–ø–µ—à–Ω–∞ –≤—Ä—ä–∑–∫–∞ –∫—ä–º –±–∞–∑–∞—Ç–∞: {e}")
        raise

conn = get_conn()

# ---------------------------
# –ü–æ–º–æ—â–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
# ---------------------------
def list_tables(conn):
    q = """
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = 'public' AND table_type='BASE TABLE'
        ORDER BY table_name;
    """
    with conn.cursor() as cur:
        cur.execute(q)
        return [r["table_name"] for r in cur.fetchall()]

def get_table_df(conn, table_name, limit=200):
    q = f"SELECT * FROM public.{psycopg.sql.Identifier(table_name).string} LIMIT %s"
    # psycopg.sql.Identifier.string used only to safely assemble; simpler path below
    q = f"SELECT * FROM public.{table_name} LIMIT %s"
    with conn.cursor() as cur:
        cur.execute(q, (limit,))
        rows = cur.fetchall()
        if not rows:
            return pd.DataFrame()
        return pd.DataFrame(rows)

def get_table_columns(conn, table_name):
    q = """
    SELECT column_name, is_identity, column_default, data_type
    FROM information_schema.columns
    WHERE table_schema = 'public' AND table_name = %s
    ORDER BY ordinal_position;
    """
    with conn.cursor() as cur:
        cur.execute(q, (table_name,))
        return cur.fetchall()

def insert_row(conn, table_name, col_names, values):
    placeholders = ", ".join(["%s"] * len(values))
    cols = ", ".join([f'"{c}"' for c in col_names])
    q = f'INSERT INTO public."{table_name}" ({cols}) VALUES ({placeholders}) RETURNING *;'
    with conn.cursor() as cur:
        cur.execute(q, tuple(values))
        conn.commit()
        return cur.fetchone()

# ---------------------------
# UI
# ---------------------------
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    try:
        tables = list_tables(conn)
    except Exception as e:
        st.error("–ù–µ –º–æ–≥–∞ –¥–∞ –ø—Ä–æ—á–µ—Ç–∞ —Ç–∞–±–ª–∏—Ü–∏—Ç–µ: " + str(e))
        st.stop()

    if not tables:
        st.info("–ù—è–º–∞ —Ç–∞–±–ª–∏—Ü–∏ –≤ —Å—Ö–µ–º–∞—Ç–∞ public.")
        st.stop()

    table = st.selectbox("–ò–∑–±–µ—Ä–∏ —Ç–∞–±–ª–∏—Ü–∞", tables)

st.markdown(f"## –¢–∞–±–ª–∏—Ü–∞: `{table}`")

# –ü–æ–∫–∞–∂–∏ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
st.subheader("–ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –¥–∞–Ω–Ω–∏")
try:
    df = get_table_df(conn, table, limit=200)
    st.dataframe(df)
except Exception as e:
    st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —á–µ—Ç–µ–Ω–µ –Ω–∞ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞: {e}")

# –§–æ—Ä–º—É–ª—è—Ä –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ —Ä–µ–¥
st.subheader("–î–æ–±–∞–≤–∏ –Ω–æ–≤ —Ä–µ–¥")

cols_meta = get_table_columns(conn, table)

# –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –∫–æ–∏ –∫–æ–ª–æ–Ω–∏ –¥–∞ –ø–æ–ø—ä–ª–Ω–∏–º (–ø—Ä–æ–ø—É—Å–∫–∞–º–µ identity / serial / default nextval)
insertable_cols = []
for c in cols_meta:
    if c["is_identity"] == "YES":
        continue
    col_default = c["column_default"] or ""
    if "nextval" in (col_default or ""):  # serial/sequence
        continue
    insertable_cols.append(c)

if not insertable_cols:
    st.info("–ù—è–º–∞ –∫–æ–ª–æ–Ω–∏, –≤ –∫–æ–∏—Ç–æ –¥–∞ –¥–æ–±–∞–≤—è—à —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ (–≤—Å–∏—á–∫–∏ —Å–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–µ –ø–æ–ø—ä–ª–≤–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ).")
else:
    with st.form("insert_form"):
        inputs = {}
        for meta in insertable_cols:
            cname = meta["column_name"]
            dtype = meta["data_type"]
            # –æ–ø—Ä–æ—Å—Ç–µ–Ω–æ: –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Ç–µ–∫—Å—Ç–æ–≤ input –∑–∞ –≤—Å–∏—á–∫–æ. –ú–æ–∂–µ –¥–∞ —Å–µ –ø–æ–¥–æ–±—Ä–∏ –ø–æ —Ç–∏–ø.
            inputs[cname] = st.text_input(f"{cname} ({dtype})")
        submitted = st.form_submit_button("–î–æ–±–∞–≤–∏")

        if submitted:
            # –ü—Ä–µ–≤—Ä—ä—â–∞–º–µ –ø—Ä–∞–∑–Ω–∏ —Å—Ç—Ä–∏–Ω–≥–æ–≤–µ –≤ None (NULL)
            values = [None if v == "" else v for v in inputs.values()]
            try:
                new_row = insert_row(conn, table, list(inputs.keys()), values)
                st.success("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–µ–Ω —Ä–µ–¥.")
                if new_row:
                    st.json(new_row)
                # –û–±–Ω–æ–≤–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞
                df = get_table_df(conn, table, limit=200)
                st.dataframe(df)
            except Exception as e:
                st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ: {e}")
